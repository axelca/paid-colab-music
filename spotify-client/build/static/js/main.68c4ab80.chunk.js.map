{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","PrettoSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","App","getHashParams","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","setState","nowPlaying","name","item","albumArt","album","images","url","getPlaylists","getUserPlaylists","limit","data","playlists","items","err","console","error","componentDidMount","handleChangevalence","event","value","params","update","state","valence","$set","handleChangeEnergy","energy","handleChangeRange","range","token","access_token","setAccessToken","loggedIn","className","href","valueLabelDisplay","aria-label","defaultValue","this","onChange","min","max","step","Component","Playlists","props","map","playlist","key","id","Playlist","getTracks","getPlaylistTracks","prevState","tracks","onClick","i","Track","handleClick","play","uris","uri","getTrackMeta","getAudioFeaturesForTrack","inRange","songValue","peopleValue","isAvailable","songvalence","songEnergy","peoplevalence","peopleEnergy","available","prevProps","artists","src","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68c4ab80.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { Slider } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport update from \"immutability-helper\";\n\nimport \"./App.css\";\n\nconst spotifyApi = new SpotifyWebApi();\nconst PrettoSlider = withStyles({\n  root: {\n    color: \"#52af77\",\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus,&:hover,&$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 4px)\"\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider);\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: { name: \"Not Checked\", albumArt: \"\" },\n      playlists: [],\n      params: { energy: 1, valence: 1, range: 0.1 }\n    };\n  }\n\n  // get access and refresh tokens from uri\n  // we will need them for making api calls, thats the thing\n  getHashParams = () => {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  };\n\n  getNowPlaying = () => {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          albumArt: response.item.album.images[0].url\n        }\n      });\n    });\n  };\n\n  getPlaylists = () => {\n    spotifyApi.getUserPlaylists({ limit: 1 }).then(\n      data => {\n        this.setState({ playlists: data.items });\n      },\n      err => {\n        console.error(err);\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    this.getPlaylists();\n  };\n\n  handleChangevalence = (event, value) => {\n    this.setState({\n      params: update(this.state.params, { valence: { $set: value / 100 } })\n    });\n  };\n\n  handleChangeEnergy = (event, value) => {\n    this.setState({\n      params: update(this.state.params, { energy: { $set: value / 100 } })\n    });\n  };\n\n  handleChangeRange = (event, value) => {\n    this.setState({\n      params: update(this.state.params, { range: { $set: value / 100 } })\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <a href=\"http://localhost:8888\"> Login to Spotify </a>\n        <div className=\"sliders\">\n          <label>\n            valence:\n            <PrettoSlider\n              valueLabelDisplay=\"auto\"\n              aria-label=\"pretto slider\"\n              defaultValue={this.state.params.valence * 100}\n              onChange={this.handleChangevalence}\n              min={3}\n              max={100}\n            />\n          </label>\n          <label>\n            Energy:\n            <PrettoSlider\n              valueLabelDisplay=\"auto\"\n              aria-label=\"pretto slider\"\n              defaultValue={this.state.params.energy * 100}\n              onChange={this.handleChangeEnergy}\n              min={35}\n              max={100}\n            />\n          </label>\n          <label>\n            Range:\n            <PrettoSlider\n              valueLabelDisplay=\"auto\"\n              aria-label=\"pretto slider\"\n              defaultValue={this.state.params.range * 100}\n              onChange={this.handleChangeRange}\n              min={10}\n              max={100}\n              step={10}\n            />\n          </label>\n        </div>\n        <Playlists data={this.state.playlists} params={this.state.params} />\n      </div>\n    );\n  }\n}\n\nconst Playlists = props =>\n  props.data.map(playlist => (\n    <Playlist key={playlist.id} playlist={playlist} params={props.params} />\n  ));\n\nclass Playlist extends Component {\n  constructor() {\n    super();\n    this.state = {\n      active: false,\n      tracks: []\n    };\n  }\n\n  getTracks = () => {\n    spotifyApi.getPlaylistTracks(this.props.playlist.id).then(\n      data => {\n        this.setState(prevState => ({\n          active: !prevState.active,\n          tracks: data.items\n        }));\n      },\n      err => {\n        console.error(err);\n      }\n    );\n  };\n\n  render() {\n    const { playlist } = this.props;\n    const { active, tracks } = this.state;\n\n    return (\n      <div>\n        <div\n          onClick={this.getTracks}\n          className={active ? \"playlist active\" : \"playlist\"}\n        >\n          {playlist.name}\n        </div>\n        {active && (\n          <div>\n            {tracks.map((track, i) => (\n              <Track\n                key={i}\n                data={track}\n                playlist={playlist}\n                params={this.props.params}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nclass Track extends Component {\n  constructor() {\n    super();\n    this.state = {\n      available: false,\n      data: {}\n    };\n  }\n\n  handleClick = () => {\n    spotifyApi.play({\n      uris: [this.props.data.track.uri]\n    });\n    this.setState(prevState => ({\n      active: !prevState.active\n    }));\n  };\n\n  getTrackMeta = track => {\n    spotifyApi.getAudioFeaturesForTrack(track).then(\n      data => {\n        this.setState({ data: data });\n      },\n      err => {\n        console.error(err);\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    this.getTrackMeta(this.props.data.track.id);\n    //this.timerID = setInterval(() => this.isAvailable(), 1000);\n  };\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.params.valence !== prevProps.params.valence ||\n      this.props.params.energy !== prevProps.params.energy ||\n      this.props.params.range !== prevProps.params.range\n    ) {\n      this.isAvailable();\n    }\n  }\n\n  componentWillUnmount() {\n    //clearInterval(this.timerID);\n  }\n\n  inRange = (songValue, peopleValue, range) => {\n    const min = peopleValue - range;\n    const max = peopleValue + range;\n\n    return songValue >= min && songValue <= max;\n  };\n\n  isAvailable = () => {\n    //console.log(\"this.state.data.valence: \", this.state.data.valence);\n    //console.log(\"this.props.params.valence: \", this.props.params.valence);\n    //console.log(\"this.state.data.energy: \", this.state.data.energy);\n    //console.log(\"this.props.params.energy: \", this.props.params.energy);\n    const { valence: songvalence, energy: songEnergy } = this.state.data;\n    const {\n      valence: peoplevalence,\n      energy: peopleEnergy,\n      range\n    } = this.props.params;\n\n    if (\n      this.inRange(songvalence, peoplevalence, range) &&\n      this.inRange(songEnergy, peopleEnergy, range)\n    ) {\n      this.setState({\n        available: true\n      });\n    } else {\n      this.setState({\n        available: false\n      });\n    }\n  };\n\n  render() {\n    const { name, artists, album } = this.props.data.track;\n    const { available } = this.state;\n\n    return (\n      <div\n        onClick={this.handleClick}\n        className={available ? \"track available\" : \"track\"}\n      >\n        <div className=\"info\">\n          <img src={album.images[2].url} />\n          {artists[0].name} - {name}\n        </div>\n        <div className=\"meta\">\n          Energy: {this.state.data.energy}, valence: {this.state.data.valence}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\nconst App = () => {\n  const [activePlaylist, setActivePlaylist] = useState([]);\n  const [activeTrack, setActiveTrack] = useState({});\n  const [playlists, setPlaylists] = useState([]);\n  const [tracks, setTracks] = useState([]);\n\n  const actions = (id, action) => {\n    switch (action) {\n      case \"SET_ACTIVE_PLAYLIST\":\n        spotifyApi.getPlaylistTracks(id).then(\n          data => {\n            setActivePlaylist(data);\n          },\n          err => {\n            console.error(err);\n          }\n        );\n\n      case \"SET_ACTIVE_TRACK\":\n        setActiveTrack(id);\n\n      case \"SET_PLAYLISTS\": //get them?\n        setPlaylists(id);\n    }\n  };\n\n  return (\n    <>\n      <Library>\n        {playlists &&\n          playlists.map(playlist => (\n            <Playlist actions={actions} data={playlist} />\n          ))}\n      </Library>\n      {playlist && (\n        <>\n          <Playlist data={playlist} />\n          <Tracks actions={actions} data={tracks} />\n        </>\n      )}\n    </>\n  );\n};\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}