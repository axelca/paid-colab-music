{"version":3,"sources":["components/Giphy.js","App.js","components/PrettoSlider.js","serviceWorker.js","index.js"],"names":["Giphy","data","text","q","active","encodeURI","useState","gif","setGif","useEffect","axios","get","url","then","response","console","log","catch","error","images","className","src","downsized_medium","socket","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","valueLabel","left","track","borderRadius","rail","Slider","openSocket","initialGifs","votes","id","energy","App","setNowPlaying","name","value","avg","parameters","touch","gifs","on","nowPlaying","emit","handleClick","event","onDoubleClick","e","preventDefault","map","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1122ee95.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Giphy = ({ data }) => {\n  const { text, active } = data;\n  const url = \"https://api.giphy.com/v1/gifs/search?api_key=\";\n  const key = \"lUxuo0G2Dg5qHDcas6AXWCY2RY8Y0td7\";\n  const q = `&q=${encodeURI(text)}&limit=1&offset=0&rating=G&lang=en`;\n\n  const [gif, setGif] = useState({});\n  useEffect(() => {\n    axios\n      .get(url + key + q)\n      .then(response => {\n        console.log(response.data.data[0]);\n        setGif(response.data.data[0]);\n      })\n      .catch(error => {\n        // handle error\n        console.log(error);\n      });\n  }, [text]);\n\n  if (gif && gif.images) {\n    return (\n      <div className=\"gif\">\n        <img src={gif.images.downsized_medium.url} />{\" \"}\n      </div>\n    );\n  }\n  return <div></div>;\n};\n\nexport default Giphy;\n","import React, { useState, useEffect } from \"react\";\nimport openSocket from \"socket.io-client\";\n\nimport Giphy from \"./components/Giphy\";\nimport PrettoSlider from \"./components/PrettoSlider\";\nimport \"./App.css\";\n\nconst socket = openSocket(\"https://6172e9f5.ngrok.io\");\nconst initialGifs = [\n  { votes: 0, active: false, id: 0, energy: 0, text: \"standing still\" },\n  { votes: 0, active: false, id: 1, energy: 10, text: \"listen to music\" },\n  { votes: 0, active: false, id: 2, energy: 20, text: \"hiphop\" },\n  { votes: 0, active: false, id: 3, energy: 30, text: \"dance\" },\n  { votes: 0, active: false, id: 4, energy: 40, text: \"moderate dance\" },\n  { votes: 0, active: false, id: 5, energy: 50, text: \"energetic dance\" },\n  { votes: 0, active: false, id: 6, energy: 60, text: \"hyper dance\" },\n  {\n    votes: 0,\n    active: false,\n    id: 7,\n    energy: 70,\n    text: \"hyper energetic dance\"\n  },\n  {\n    votes: 0,\n    active: false,\n    id: 8,\n    energy: 80,\n    text: \"super hyper energetic dance\"\n  },\n  { votes: 0, active: false, id: 9, energy: 90, text: \"freak out\" },\n  { votes: 0, active: false, id: 10, energy: 100, text: \"freaking out again\" }\n];\n\nconst App = () => {\n  // state\n  const [nowPlaying, setNowPlaying] = useState({});\n  const [available, setAvailable] = useState(false);\n  const [count, setCount] = useState(0);\n  const [parameters, setParameters] = useState([\n    { name: \"energy\", value: 50, avg: 50, active: false }\n  ]);\n  const [votes, setVotes] = useState([50]);\n  const [touch, setTouch] = useState(false);\n  const [gifs, setGifs] = useState(initialGifs);\n\n  // init\n  socket.on(\"now playing\", nowPlaying => {\n    setNowPlaying(nowPlaying);\n  });\n\n  // when peopleValue updates, send data to server\n  useEffect(() => {\n    console.log(parameters);\n    socket.emit(\"new value\", parameters);\n  }, [votes]);\n\n  const changeParameter = (name, event, value) => {\n    const newParameters = parameters.map(parameter => {\n      if (parameter.name !== name) {\n        return parameter;\n      }\n      return {\n        ...parameter,\n        value,\n        active: true\n      };\n    });\n\n    setParameters(newParameters);\n  };\n\n  const touchEnd = (name, event, value) => {\n    const threshold = 5;\n    let avg = votes.reduce((a, b) => a + b, 0) / votes.length || 0;\n    if (votes.length > threshold) {\n      avg =\n        votes\n          .slice(votes.length - threshold, votes.length)\n          .reduce((a, b) => a + b, 0) / threshold || 0;\n    }\n    const newParameters = parameters.map(parameter => {\n      if (parameter.name !== name) {\n        return parameter;\n      }\n\n      return {\n        ...parameter,\n        value: Math.round(avg),\n        avg: Math.round(avg),\n        active: false\n      };\n    });\n\n    setParameters(newParameters);\n    setVotes([...votes, value]);\n  };\n\n  /*\n  const addParameter = (name, event) => {\n    if (name in parameters) {\n      return parameters;\n    }\n\n    setParameters([...parameters, { name, value: 0 }]);\n  };\n\n  const removeParameter = (name, event) => {\n    const newParameters = parameters.filter(\n      parameter => name !== parameter.name\n    );\n    setParameters(newParameters);\n  };\n\n  useEffect(() => {\n    if (count > 20) setAvailable(true);\n  });\n\n  const handlePlay = () => {\n    setCount(0);\n    setAvailable(false);\n    socket.emit(\"next\", true);\n  };\n  */\n\n  const handleClick = event => {\n    console.log(event);\n  };\n\n  return (\n    <div className=\"wrapper\" onDoubleClick={e => e.preventDefault()}>\n      <div className={touch ? \"App touch\" : \"App\"}>\n        <h1>Control the mood!</h1>\n        <h3>Be a part of controlling the ambience by adjusting the music</h3>\n        <div className=\"gifs\">\n          {gifs.map(gif => (\n            <Giphy key={gif.id} data={gif} onClick={handleClick} />\n          ))}\n        </div>\n        {/*\n        <div className=\"controls\">\n          {parameters.map(parameter => (\n            <Parameter\n              key={parameter.name}\n              data={parameter}\n              handleChange={changeParameter.bind(null, parameter.name)}\n              touchEnd={touchEnd.bind(null, parameter.name)}\n            />\n          ))}\n        </div>\n          */}\n      </div>\n    </div>\n  );\n};\n\nconst Parameter = ({ data, handleChange, touchEnd }) => {\n  const { name, value, active } = data;\n  return (\n    <PrettoSlider\n      className={active ? \"slider active\" : \"slider\"}\n      onChangeCommitted={touchEnd}\n      valueLabelDisplay=\"auto\"\n      aria-label={`slider for ${name}`}\n      value={value}\n      onChange={handleChange}\n      min={1}\n      max={100}\n    />\n  );\n};\n\nconst NowPlaying = ({ data }) => {\n  const { album, artists, name } = data;\n  return (\n    <div>\n      <div>\n        <img src={album.images[2].url} alt=\"album cover\" />\n      </div>\n      <div>{name}</div>\n      <div>{artists[0].name}</div>\n    </div>\n  );\n};\n\nexport default App;\n","import { Slider } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst PrettoSlider = withStyles({\n  root: {\n    color: \"#52af77\",\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus,&:hover,&$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 4px)\"\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider);\n\nexport default PrettoSlider;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}