{"version":3,"sources":["minus.svg","plus.svg","click.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","audio","Audio","click","App","socket","openSocket","useState","peopleValue","setPeopleValue","wasClicked","useEffect","console","log","emit","handleClick","action","play","className","onDoubleClick","event","target","includes","preventDefault","onClick","src","minus","plus","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,gQCQrCC,EAAQ,IAAIC,M,OAAMC,GAsETC,EApEH,WACV,IAAMC,EAASC,IAAW,6BADV,EAEsBC,mBAAS,GAF/B,mBAETC,EAFS,KAEIC,EAFJ,OAGoBF,oBAAS,GAH7B,mBAGTG,EAHS,UAKhBC,qBAAU,WACRC,QAAQC,IAAI,YAAaL,GACzBH,EAAOS,KAAK,mBAAoBN,MAGlC,IAKMO,EAAc,SAAAC,GAElBf,EAAMgB,OAES,QAAXD,GAAoBR,EAAc,EACpCC,EAAeD,EAAc,KACT,aAAXQ,GAAyBR,EAAc,KAChDC,EAAeD,EAAc,MAYjC,OACE,yBAAKU,UAAU,UAAUC,cAzBD,SAAAC,GACpBA,EAAMC,OAAOH,UAAUI,SAAS,qBACpCF,EAAMG,mBAwBJ,yBAAKL,UAAU,OACb,iDACA,kHAIA,yBAAKA,UAAWR,EAAa,sBAAwB,YACnD,4BACEQ,UAAU,qDACVM,QAAS,kBAAMT,EAAY,cAE3B,yBAAKG,UAAU,mBAAmBO,IAAKC,OAEzC,4BACER,UAAU,oDACVM,QAAS,kBAAMT,EAAY,SAE3B,yBAAKG,UAAU,mBAAmBO,IAAKE,QAG3C,yBAAKT,UAAU,UAAf,UACU,IACR,0BAAMA,UAAU,uBACbU,KAAKC,MAAoB,IAAdrB,IACN,IAJV,YCtDYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.23ab8d12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/minus.e06ee095.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.7fdd4344.svg\";","module.exports = __webpack_public_path__ + \"static/media/click.56a99ebe.mp3\";","import React, { useState, useEffect } from \"react\";\nimport openSocket from \"socket.io-client\";\nimport \"./App.css\";\n\nimport minus from \"./minus.svg\";\nimport plus from \"./plus.svg\";\nimport click from \"./click.mp3\";\n\nconst audio = new Audio(click);\n\nconst App = () => {\n  const socket = openSocket(\"https://2dda0d12.ngrok.io\");\n  const [peopleValue, setPeopleValue] = useState(0);\n  const [wasClicked, setWasClicked] = useState(false);\n\n  useEffect(() => {\n    console.log(\"sending: \", peopleValue);\n    socket.emit(\"values to server\", peopleValue);\n  });\n\n  const handleDoubleClick = event => {\n    if (event.target.className.includes(\"allowDoubleClick\")) return;\n    event.preventDefault();\n  };\n\n  const handleClick = action => {\n    //if (wasClicked) return;\n    audio.play();\n\n    if (action === \"add\" && peopleValue < 1) {\n      setPeopleValue(peopleValue + 0.01);\n    } else if (action === \"subtract\" && peopleValue > 0.01) {\n      setPeopleValue(peopleValue - 0.01);\n    }\n\n    /*\n    setTimeout(() => {\n      setWasClicked(false);\n    }, 1000);\n\n    return setWasClicked(true);\n    */\n  };\n\n  return (\n    <div className=\"wrapper\" onDoubleClick={handleDoubleClick}>\n      <div className=\"App\">\n        <h1>Control the mood!</h1>\n        <h3>\n          Be a part of controlling the ambience by increasing or decreasing the\n          energy level\n        </h3>\n        <div className={wasClicked ? \"controls wasClicked\" : \"controls\"}>\n          <button\n            className=\"controls__control controls__minus allowDoubleClick\"\n            onClick={() => handleClick(\"subtract\")}\n          >\n            <img className=\"allowDoubleClick\" src={minus} />\n          </button>\n          <button\n            className=\"controls__control controls__plus allowDoubleClick\"\n            onClick={() => handleClick(\"add\")}\n          >\n            <img className=\"allowDoubleClick\" src={plus} />\n          </button>\n        </div>\n        <div className=\"status\">\n          Energy:{\" \"}\n          <span className=\"status__peopleValue\">\n            {Math.round(peopleValue * 100)}\n          </span>{\" \"}\n          / 100\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}