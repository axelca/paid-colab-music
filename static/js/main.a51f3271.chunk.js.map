{"version":3,"sources":["images/thumb.svg","initialState.js","components/Giphy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","id","energy","voteCount","active","giphyId","Giphy","data","onClick","text","q","useState","gif","setGif","useEffect","axios","get","then","response","catch","error","console","log","images","className","src","fixed_width_downsampled","url","thumb","socket","openSocket","App","gifs","setGifs","peopleValue","setPeopleValue","emit","on","setActiveGif","off","gifIndex","sort","a","b","activeGifValue","hasVotes","map","handleClick","newGifs","activeGifID","onDoubleClick","e","preventDefault","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a51f3271.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thumb.01dcf2b9.svg\";","const initialState = [\n  {\n    id: 0,\n    energy: 0,\n    voteCount: 0,\n    active: true,\n    giphyId: \"3lxD1O74siiz5FvrJs\"\n  },\n  {\n    id: 1,\n    energy: 16.67,\n    voteCount: 0,\n    active: false,\n    giphyId: \"pHYaWbspekVsTKRFQT\"\n  },\n\n  {\n    id: 2,\n    energy: 33.3,\n    voteCount: 0,\n    active: false,\n    giphyId: \"woyPnjW6I3I9W\"\n  },\n  { id: 3, energy: 50, voteCount: 0, active: false, giphyId: \"TLqkzhMIZxAQg\" },\n  {\n    id: 4,\n    energy: 66.7,\n    voteCount: 0,\n    active: false,\n    giphyId: \"l0MYt5jPR6QX5pnqM\"\n  },\n  { id: 5, energy: 83.3, voteCount: 0, active: false, giphyId: \"kgKrO1A3JbWTK\" }\n];\n\nexport default initialState;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport thumb from \"../images/thumb.svg\";\n//api.giphy.com/v1/gifs/asdsad?api_key=lUxuo0G2Dg5qHDcas6AXWCY2RY8Y0td7\nconst Giphy = ({ data, onClick }) => {\n  const { text, active, id, voteCount, giphyId } = data;\n  const url = \"https://api.giphy.com/v1/gifs/\";\n  const key = \"?api_key=lUxuo0G2Dg5qHDcas6AXWCY2RY8Y0td7\";\n  //const q = `&q=${encodeURI(text)}&limit=1&offset=0&rating=G&lang=en`;\n  const q = giphyId;\n\n  const [gif, setGif] = useState({});\n  useEffect(() => {\n    axios\n      .get(url + q + key)\n      .then(response => {\n        setGif(response.data.data);\n      })\n      .catch(error => {\n        // handle error\n        console.log(error);\n      });\n  }, [text]);\n\n  if (gif && gif.images) {\n    return (\n      <div\n        onClick={active ? null : () => onClick(id)}\n        className={active ? \"gif active\" : \"gif\"}\n      >\n        <img src={gif.images.fixed_width_downsampled.url} />{\" \"}\n        {active ? <div className=\"current\">Current mood</div> : null}\n        <div className=\"votes\">\n          {active ? null : <img src={thumb} />}\n          {active ? null : voteCount}\n        </div>\n        {active ? null : <div className=\"inactive\"></div>}\n      </div>\n    );\n  }\n  return <div></div>;\n};\n\nexport default Giphy;\n","import React, { useState, useEffect } from \"react\";\nimport openSocket from \"socket.io-client\";\nimport sort from \"immutable-sort\";\n\nimport initialState from \"./initialState\";\nimport Giphy from \"./components/Giphy\";\nimport \"./App.css\";\n\nconst socket = openSocket(\"https://9ca3a5bb.ngrok.io\");\n\nconst App = () => {\n  // state\n  const [gifs, setGifs] = useState(initialState);\n  const [peopleValue, setPeopleValue] = useState(0);\n\n  // when peopleValue updates, send data to server\n  useEffect(() => {\n    socket.emit(\"new value\", peopleValue);\n  }, [peopleValue]);\n\n  // when spotify client plays new song\n  useEffect(() => {\n    socket.on(\"new song\", data => {\n      setActiveGif(data);\n    });\n    return () => {\n      socket.off(\"news song\");\n    };\n  });\n\n  // whenever votes change\n  useEffect(() => {\n    const gifIndex = sort(gifs, (a, b) => (a.voteCount > b.voteCount ? -1 : 1));\n    const activeGifValue = gifIndex[0].energy;\n    let hasVotes = false;\n    gifIndex.map(gif => {\n      if (gif.voteCount > 0) {\n        hasVotes = true;\n      }\n    });\n\n    if (hasVotes) {\n      setPeopleValue(activeGifValue);\n    }\n  }, [gifs]);\n\n  // this happens when the user clicks a GIF\n  const handleClick = id => {\n    const newGifs = gifs.map(gif => {\n      if (gif.id !== id) {\n        return gif;\n      }\n      return {\n        ...gif,\n        voteCount: gif.voteCount + 1\n      };\n    });\n    setGifs(newGifs);\n  };\n\n  // Set the current mood\n  const setActiveGif = () => {\n    const gifIndex = sort(gifs, (a, b) => (a.voteCount > b.voteCount ? -1 : 1));\n    const activeGifID = gifIndex[0].id;\n\n    const newGifs = gifs.map(gif => {\n      if (gif.id !== activeGifID) {\n        return {\n          ...gif,\n          active: false,\n          voteCount: 0\n        };\n      }\n      return {\n        ...gif,\n        active: true,\n        voteCount: 0\n      };\n    });\n\n    setGifs(newGifs);\n  };\n\n  return (\n    <div className=\"wrapper\" onDoubleClick={e => e.preventDefault()}>\n      <div className=\"App\">\n        <h1>Control the mood</h1>\n        <h3>Be a part of controlling the music by voting for a GIF</h3>\n        <div className=\"gifs\">\n          {gifs.map(gif => (\n            <Giphy key={gif.id} data={gif} onClick={handleClick} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}